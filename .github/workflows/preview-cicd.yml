# feat/refactor etc -> develop에 PR 할 때 사용되는 워크플로입니다.
# PR 코드 빌드 & 테스트 / Vercel에 preview 배포 / PR Comment에 preview URL + 시간을 남깁니다.
name: preview-cicd.yml

env:
  VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}

on:
  pull_request:
    branches: [ develop ]

jobs:
  project-build:
    # 실행 환경으로 ubuntu의 최신 버전을 사용합니다.
    runs-on: ubuntu-latest
    strategy:
      # Node.js는 20 버전을, pnpm은 10 버전을 사용합니다.
      matrix:
        node-version: [ 20 ]
    steps:
      # 저장소를 체크아웃합니다.
      - name: Checkout
        uses: actions/checkout@v4

      # pnpm을 설치합니다.
      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10

      # Node.js 세팅 & pnpm을 캐시합니다.
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: pnpm

      # pnpm install로 의존성 설치합니다.
      - name: Install dependencies
        run: pnpm install

      # pnpm run build를 실행합니다.
      - name: Build
        run: pnpm run build

      # pnpm test로 테스트를 실행합니다.
      - name: Test
        run: pnpm test:ci

  # project-build가 성공적으로 실행된다면, 다음 deploy-to-vercel이 실행됩니다.
  deploy-to-vercel:
    runs-on: ubuntu-latest
    needs: project-build
    # 출력값으로, preview_url(사전 Vercel 배포 링크) & current_time(현재 시각)을 출력합니다.
    outputs:
      preview_url: ${{ steps.deploy-vercel.outputs.preview_url }}
      current_time: ${{ steps.current-time.outputs.formattedTime }}
    strategy:
      matrix:
        node-version: [ 20 ]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: pnpm

      - name: Install dependencies
        run: pnpm install

      # Github Action 실행 환경과 vercel 프로젝트를 연결합니다.
      - name: Link Vercel project (non-interactive)
        run: |
          pnpm dlx vercel@latest link --project uiux-server --yes --token=${{ secrets.VERCEL_TOKEN }}

      # Vercel에 저장된 환경 변수(VERCEL_TOKEN)을 현재 CI 환경으로 가져옵니다.
      - name: Pull env (preview)
        run: pnpm dlx vercel@latest pull --yes --environment=preview --token=${{ secrets.VERCEL_TOKEN }}

      # Vercel CLI를 이용해 프로젝트를 빌드합니다.
      - name: Build
        run: pnpm dlx vercel@latest build --token=${{ secrets.VERCEL_TOKEN }}

      # 앞에서 빌드한 결과물을 그대로 업로드 후, Preview 환경에 배포합니다.
      # 출력된 Preview URL은 vercel-output.txt에 저장하고, 해당 URL을 불러와 job output에 등록합니다.
      - name: Deploy (prebuilt)
        id: deploy-vercel
        run: |
          pnpm dlx vercel@latest deploy --prebuilt --token=${{ secrets.VERCEL_TOKEN }} > vercel-output.txt
          echo "preview_url=$(cat vercel-output.txt)" >> $GITHUB_OUTPUT

      # 배포 완료 시각을 가져와, PR 코멘트에 표시하도록 합니다.
      - name: Get current Time
        uses: josStorer/get-current-time@v2
        id: current-time
        with:
          format: "YYYY년 MM월 DD일 HH시 mm분"
          utcOffset: "+09:00"

  # PR 코멘트에 preview URL과 배포 시각을 코멘트로 달아주는 역할을 합니다.
  preview-comment:
    runs-on: ubuntu-latest
    needs: [ deploy-to-vercel ]
    steps:
      - name: Comment PR
        uses: thollander/actions-comment-pull-request@v3
        with:
          comment-tag: ${{ github.event.number }}
          message: |
            🧷 Preview: ${{ needs.deploy-to-vercel.outputs.preview_url }}
            ⏰ Update: ${{ needs.deploy-to-vercel.outputs.current_time }}