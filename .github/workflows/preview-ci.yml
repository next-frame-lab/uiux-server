# feat/refactor etc -> develop에 PR 할 때 사용되는 워크플로입니다.
# PR 코드 빌드 & 테스트 / Vercel에 preview 배포 / PR Comment에 preview URL + 시간을 남깁니다.
name: preview-ci.yml

on:
  pull_request:
    branches: [develop]

jobs:
  install-cache:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [20]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: pnpm

      - name: Cache pnpm dependencies
        uses: actions/cache@v4
        id: cache-dependencies
        with:
          path: node_modules
          key: ${{runner.os}}-pnpm-${{hashFiles('**/pnpm-lock.yaml')}}
          restore-keys: |
            ${{runner.os}}-pnpm-

      - name: Install Dependencies
        if: steps.cache-dependencies.outputs.cache-hit != 'true'
        run: |
          pnpm install --frozen-lockfile

  # ESLint와 Prettier 규칙에 준수하게 지켰는지 확인합니다.
  lint-format:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [20]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10

      - name: Use Node.js ${{matrix.node-version}}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: pnpm

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run ESLint & Prettier
        run: |
          pnpm lint
          pnpm format

  # 타입 체크를 진행합니다.
  type-check:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [20]

    needs: install-cache

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10

      - name: Use Node.js ${{matrix.node-version}}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}

      - name: Restore pnpm dependencies
        uses: actions/cache@v4
        id: cache-dependencies
        with:
          path: node_modules
          key: ${{runner.os}}-pnpm-${{hashFiles('**/pnpm-lock.yaml')}}
          restore-keys: |
            ${{ runner.os }}-pnpm-

      - name: Check Types
        run: |
          pnpm typecheck

  project-build:
    needs: [lint-format, type-check]
    # 실행 환경으로 ubuntu의 최신 버전을 사용합니다.
    runs-on: ubuntu-latest
    strategy:
      # Node.js는 20 버전을, pnpm은 10 버전을 사용합니다.
      matrix:
        node-version: [20]
    steps:
      # 저장소를 체크아웃합니다.
      - name: Checkout
        uses: actions/checkout@v4

      # pnpm을 설치합니다.
      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10

      # Node.js 세팅 & pnpm을 캐시합니다.
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: pnpm

      # pnpm install로 의존성 설치합니다.
      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      # pnpm run build를 실행합니다.
      - name: Build
        run: pnpm run build

      # pnpm test로 테스트를 실행합니다.
      - name: Test
        run: pnpm test:ci

      # 빌드 결과물이 .env 파일의 VITE_ 로 시작하는 환경 변수들을 잘 포함하고 있는지 확인합니다.
      - name: Verify .env file
        shell: bash
        run: |
          set -euo pipefail

          if ! ls dist >/dev/null 2>&1; then
            echo "dist directory not found!" >&2
            exit 1
          fi

          if [ ! -f .env ]; then
            echo ".env file not found!" >&2
            exit 1
          fi

          while IFS = read -r line || [ -n "$line" ]; do
          [[ "$line" =~ ^[[:space:]]*# ]] && continue
          [[ -z "$line" ]] && continue
          if [[ "$line" =~ ^(VITE_[A-Za-z0-9_]+)=(.*)$ ]]; then
            key="${BASH_REMATCH[1]}"
            val="${BASH_REMATCH[2]}"

            if [ -z "$val" ]; then
              echo "Error: $key is empty value" >&2
              exit 1
            fi

            if ! grep -qF -- "$val" dist/assets/*.js 2>/dev/null; then
              echo "$key not found in build output" >&2
              exit 1
            fi
          fi
            done < .env
